name: Notify Repo A on Developer Branch Push
run-name: deploy-${{ github.repository }}-${{ github.ref_name }}-${{ github.run_id }}

on:
  push:
    branches: [staging, litellm_stable_release_branch]
    tags: ['v*']

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  IMAGE_REPO: oraichain/litellm
  CHART_NAME: thesis-litellm
  RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

jobs:
  # ====== YAML step anchors (DRY) ======
  _templates:
    if: ${{ false }}
    runs-on: ubuntu-latest
    steps:
      - &checkout
        name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - &docker_login
        name: Login DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - &set_short_commit
        name: Set Short Commit
        run: echo "SHORT_COMMIT=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV

      - &build_push
        name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_REPO }}:${{ env.TAG_PREFIX }}.${{ env.SHORT_COMMIT }}

      - &install_gh_cli
        name: Install GH CLI
        run: |
          set -euo pipefail
          type -p gh >/dev/null && exit 0
          sudo apt-get update
          sudo apt-get install -y curl
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
            | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
            | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt-get update && sudo apt-get install -y gh

      - &gh_version
        name: gh version
        run: gh version

      - &install_yq
        name: Install yq
        run: |
          set -euo pipefail
          if ! command -v yq >/dev/null 2>&1; then
            BIN=/usr/local/bin/yq
            sudo wget -q https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O "$BIN"
            sudo chmod +x "$BIN"
          fi
          yq --version

      - &update_tag_and_pr
        name: Update image tag & PR
        env:
          PAT: ${{ secrets.PAT_TOKEN_HELM }}
          GH_TOKEN: ${{ secrets.GH_TOKEN_HELM }}
          APPROVAL_GH_TOKEN: ${{ secrets.APPROVAL_GH_TOKEN_HELM }}
        run: |
          set -euo pipefail
          export TAG="${{ env.TAG_PREFIX }}.${{ env.SHORT_COMMIT }}"
          export PAT="${APPROVAL_GH_TOKEN}"
          export APPROVAL="${APPROVAL_GH_TOKEN}"

          git clone https://${GH_TOKEN}@github.com/oraichain/infra-deployments.git
          cd infra-deployments

          git config --global user.email "devops@orai.io"
          git config --global user.name "DevOps"
          BR="feat/update-${{ env.CHART_NAME }}-${{ env.ENV_NAME }}-tag-${TAG}"
          git checkout -b "$BR"
          git remote set-url origin https://${PAT}@github.com/oraichain/infra-deployments.git

          if [[ ! -f "${{ env.HELM_CHARTS_PATH }}" ]]; then
            echo "❌ File ${{ env.HELM_CHARTS_PATH }} doesn't exist!"
            exit 1
          fi

          yq eval -i "${KEY} = strenv(TAG)" "${HELM_CHARTS_PATH}"
          git add "${{ env.HELM_CHARTS_PATH }}"
          git commit -m "feat(${{ env.CHART_NAME }}): update image tag in ${{ env.ENV_NAME }} to ${TAG}"
          git push -fu origin "$BR"

          PR_URL=$(gh pr list -H "$BR" -B master --json url --jq '.[].url')
          if [[ -z "${PR_URL}" ]]; then
            gh pr create --title "Update ${{ env.CHART_NAME }} image tag to ${TAG} in ${{ env.ENV_NAME }}" --body "${{ env.ENV_NAME }} ${TAG}" -B master
            PR_URL=$(gh pr list -H "$BR" -B master --json url --jq '.[].url')
          fi
          echo "PR=${PR_URL}" >> $GITHUB_ENV

          GH_TOKEN=$APPROVAL gh pr review -a "$BR" -b "${{ env.ENV_NAME }} env will be auto approved"
          GH_TOKEN=$APPROVAL gh pr merge -d -s --body="${TAG} will be synced to ${{ env.ENV_NAME }} by ArgoCD" "$BR" --admin

      - &notify_single
        name: Notify Discord (single)
        if: always()
        uses: appleboy/discord-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID_HELM }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN_HELM }}
          username: GitBot
          message: |
            ${{ job.status == 'success' && ':white_check_mark:' || ':x:' }} **${{ env.CHART_NAME }}** — `${{ env.ENV_NAME }}`
            • Ref: `${{ github.ref_name }}`
            • Commit: `${{ env.SHORT_COMMIT }}`
            • Image: `${{ env.TAG_PREFIX }}.${{ env.SHORT_COMMIT }}`
            • PR: ${{ env.PR || 'N/A' }}
            • Run: ${{ env.RUN_URL }}
            ${{ job.status != 'success' && '\n<@769401829540102154> please check deploy failure!' || '' }}



  # ====== Staging job ======
  build_and_deploy_k8s_staging:
    if: github.ref_type == 'branch' && github.ref_name == 'staging'
    runs-on: ubuntu-latest
    env:
      TAG_PREFIX: staging
      ENV_NAME: staging
      HELM_CHARTS_PATH: helm-charts/litellm/values-staging.yaml
      KEY: .image.tag
    steps:
      - *checkout
      - *docker_login
      - *set_short_commit
      - *build_push
      - *install_gh_cli
      - *gh_version
      - *install_yq
      - *update_tag_and_pr
      - *notify_single

  # ====== Production job ======
  build_and_deploy_k8s_prod:
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    runs-on: ubuntu-latest
    env:
      TAG_PREFIX: ${{ github.ref_name }}
      ENV_NAME: production
      HELM_CHARTS_PATH: helm-charts/litellm/values-prod.yaml
      KEY: .image.tag
    steps:
      - *checkout
      - *docker_login
      - *set_short_commit
      - *build_push
      - *install_gh_cli
      - *gh_version
      - *install_yq
      - *update_tag_and_pr
      - *notify_single
